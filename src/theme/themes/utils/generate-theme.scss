@use "sass:color";
@use "sass:map";
@use "./contrast-colour.scss";

// Returns a map of colours based partly on Material Design's colour system
// https://material.io/design/color/the-color-system.html
@function getColorPalette(
  $primary,
  $secondary,
  $page-background: null,
  $weights: (50, 100, 200, 300, 400, 500, 600, 700, 800, 900)
) {
  $result: (
    "color-primary": $primary,
    "color-primary-contrast": contrast-colour.choose-contrast-color($primary),
    "color-secondary": $secondary,
    "color-secondary-contrast": contrast-colour.choose-contrast-color($secondary),
    "background-color": color.change($primary, $lightness: 95%),
    "color-yellow": #ffd333,
    "color-red": #eb445a,
    "default-box-shadow": 0 4px 4px rgba(0, 0, 0, 0.25),
    //  GRADIENTS
    // primary-gradient
    "gradient-primary-start": color.adjust($primary, $lightness: 33%),
    "gradient-primary-end": color.adjust($primary, $saturation: 2%, $lightness: 13%),
    // secondary-gradient
    "gradient-secondary-start": color.adjust($secondary, $saturation: 4%),
    "gradient-secondary-end": color.adjust($secondary, $saturation: 5%, $lightness: -19%),
  );

  // Generate variants of base colours based on given weights and add to map
  // E.g. '"color-primary-400": color.change($primary, $lightness: 60%)'
  $result: map.merge($result, generateColourVariants($primary, "primary", $weights));
  $result: map.merge($result, generateColourVariants($secondary, "secondary", $weights));

  @if ($page-background != null) {
    $result: map.set($result, "background-color", $page-background);
  }
  @return $result;
}

@function generateColourVariants($base, $baseName, $weights) {
  $variants-map: ();
  @each $weight in $weights {
    $map: (color-#{$baseName}-#{$weight}: color.change($base, $lightness: 100 - ($weight / 10)));
    $variants-map: map.merge($variants-map, $map);
  }
  $map: (color-#{$baseName}-transparent: rgba($base, 0.5));
  $variants-map: map.merge($variants-map, $map);
  @return $variants-map;
}

@mixin generateTheme($p, $s, $bg: null) {
  $colorPalette: getColorPalette($p, $s, $bg);
  @include colorVariables($colorPalette);
}

@mixin colorVariables($sourceColorPalette) {
  $colorPalette: $sourceColorPalette;

  // Generate variants of base colours based on given weights and add to map
  // E.g. equivalent to '--ion-color-primary-400: #{map.get($colorPalette, "color-primary-400")}'
  @each $label, $color in $colorPalette {
    --ion-#{$label}: #{$color};
  }

  --ion-item-background: #{map.get($colorPalette, "color-primary-100")};

  // BORDERS
  --ion-border-standard: 2px solid #{map.get($colorPalette, "color-primary")};
  --ion-border-thin-standard: 1px solid #{map.get($colorPalette, "color-primary")};
  --ion-border-color-secondary: 2px solid #{map.get($colorPalette, "color-secondary")};
  --ion-border-light: 1px solid #{map.get($colorPalette, "light")};
  --ion-border-light-thicker: 2px solid #{map.get($colorPalette, "light")};
  --border-dashed: 2px dashed #{map.get($colorPalette, "color-primary")};

  //  GRADIENTS
  //Gradient direction
  $vertical: 180deg;
  $horizontal: 90deg;

  // COMPONENTS
  // Buttons
  --ion-btn-primary: linear-gradient(
    #{$vertical},
    #{map.get($colorPalette, "gradient-primary-start")} 0.43%,
    #{map.get($colorPalette, "gradient-primary-end")} 74.07%
  );
  --ion-btn-secondary: linear-gradient(
    #{$vertical},
    #{map.get($colorPalette, "gradient-secondary-start")} 28.12%,
    #{map.get($colorPalette, "gradient-secondary-end")} 100%
  );
  --ion-btn-control-bg: #{color.adjust(
      map.get($colorPalette, "color-primary"),
      $hue: 3.6deg,
      $saturation: 3%,
      $lightness: 25%
    )};
}
