# Manually trigger an android build and deploy to Appetize.io

name: Test Appetize
on:
  pull_request:
    types: [labeled, synchronize]
    branches:
      - deployment/*
      - master
jobs:
  set_environment:
    if: contains(github.event.pull_request.labels.*.name, 'Test - appetize')
    outputs:
      my_env: ${{ steps.setenv.outputs.MY_ENV }}
    runs-on: ubuntu-latest
    steps:
    - name: Set Environment Name
      run: |
        if [ "$GITHUB_BASE_REF" = "master" ];                    \
        then echo "DEPLOYMENT_NAME=plh_global" >> $GITHUB_ENV;              \
        else echo "DEPLOYMENT_NAME=${GITHUB_BASE_REF##*/}" >> $GITHUB_ENV;  \
        fi
    - id: setenv
      run: echo "MY_ENV=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT
  test_appetize:
    needs: set_environment
    if: contains(github.event.pull_request.labels.*.name, 'Test - appetize')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.set_environment.outputs.MY_ENV }}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      # Extract deployment name as the slug of target PR branch via string operators, e.g. /deployment/plh_tz -> plh_tz
      # https://www.linuxjournal.com/article/8919, https://github.com/greenbone/gsa/actions/runs/1277581365/workflow
      - name: Set Environment Deployment
        run: |
          if [ "$GITHUB_BASE_REF" = "master" ];                    \
          then echo "DEPLOYMENT_NAME=plh_global" >> $GITHUB_ENV;              \
          else echo "DEPLOYMENT_NAME=${GITHUB_BASE_REF##*/}" >> $GITHUB_ENV;  \
          fi
        shell: bash
      - run: |
          echo $GITHUB_BASE_REF
          echo $DEPLOYMENT_NAME
          echo $MY_ENV
          echo ${{ needs.set_environment.outputs.MY_ENV }}
      # - name: Checkout LFS objects
      #   run: git lfs checkout
      # - name: Setup node
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 16
      #     cache: 'yarn'
      # - name: Populate firebaseConfig.ts
      #   env:
      #     FIREBASE_CONFIG_TS: ${{ secrets.FIREBASE_CONFIG_TS }}
      #   run: echo $FIREBASE_CONFIG_TS > src/environments/firebaseConfig.ts
      # - name: Populate google-services.json
      #   env:
      #     GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      #   run: echo $GOOGLE_SERVICES_JSON > android/app/google-services.json
      # - name: Install Dependencies
      #   run: yarn install
      # - name: Set Deployment
      #   run: yarn workflow deployment set $DEPLOYMENT_NAME
      # - name: Build Angular Project
      #   run: yarn build
      # - name: Sync Android Files
      #   run: npx cap sync
      # - name: Set up JDK 11
      #   uses: actions/setup-java@v2
      #   with:
      #     distribution: "zulu"
      #     java-version: "11"
      #     java-package: jdk
      #     cache: "gradle"
      # - name: Setup Android SDK
      #   uses: android-actions/setup-android@v2
      # - name: Build Android Debug APK
      #   working-directory: android
      #   run: ./gradlew :app:assembleDebug
      # - name: Upload to Appetize.io
      #   id: upload
      #   uses: maxep/appetize-upload-action@0.1.0
      #   with:
      #     api-token: ${{ secrets.APPETIZE_TOKEN }}
      #     file-path: android/app/build/outputs/apk/debug/app-debug.apk
      #     platform: "android"
      #     timeout: 30
      #     # Include to overwrite existing app instead of creating new (will only allow single build at a time)
      #     public-key: ${{secrets.APPETIZE_APP_KEY}}
      # - name: "Post to PR"
      #   uses: marocchino/sticky-pull-request-comment@v2
      #   with:
      #     message: |
      #       **Android Appetize URL**
      #       ${{ steps.upload.outputs.APPETIZE_APP_URL }}?device=nexus5&osVersion=10.0&scale=75
